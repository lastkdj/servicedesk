{"version":3,"sources":["../../src/util/errors.ts","../../src/helpers/extract-app-config.ts","../../src/helpers/array-base64-translator.ts","../../src/helpers/migrate-old-database.ts","../../src/helpers/idb-manager.ts","../../src/util/constants.ts","../../src/core/api.ts","../../src/core/token-management.ts","../../src/interfaces/internal-message.ts","../../src/helpers/is-console-message.ts","../../src/controllers/window-controller.ts","../../src/controllers/sw-controller.ts","../../src/helpers/sleep.ts","../../src/index.ts"],"names":["ERROR_MAP","ERROR_FACTORY","getMissingValueError","valueName","create","arrayToBase64","array","uint8Array","Uint8Array","btoa","String","fromCharCode","replace","base64ToArray","base64String","base64","repeat","length","rawData","atob","outputArray","i","charCodeAt","migrateOldDatabase","senderId","indexedDB","databases","map","db","name","includes","tokenDetails","oldVersion","objectStoreNames","contains","objectStore","transaction","index","get","value","clear","oldDetails","auth","p256dh","endpoint","token","fcmToken","createTime","Date","now","subscriptionOptions","swScope","vapidKey","close","checkTokenDetails","OBJECT_STORE_NAME","dbPromise","getDbPromise","upgradeDb","createObjectStore","dbGet","firebaseDependencies","key","getKey","appConfig","oldTokenDetails","dbSet","tx","put","complete","dbRemove","delete","appId","DEFAULT_VAPID_KEY","requestGetToken","getHeaders","headers","body","getBody","subscribeOptions","method","JSON","stringify","fetch","getEndpoint","json","responseData","errorInfo","error","message","requestUpdateToken","updateOptions","requestDeleteToken","unsubscribeOptions","ENDPOINT","projectId","installations","getToken","authToken","Headers","Accept","apiKey","web","applicationPubKey","MessageType","swRegistration","Notification","permission","getPushSubscription","pushSubscription","scope","getNewToken","dbOptions","currentOptions","isVapidKeyEqual","isEndpointEqual","isAuthEqual","isP256dhEqual","isTokenValid","console","warn","updateToken","deleteToken","pushManager","getSubscription","unsubscribe","updatedToken","updatedTokenDetails","subscription","subscribe","userVisibleOnly","applicationServerKey","isConsoleMessage","data","onMessageCallback","navigator","serviceWorker","addEventListener","e","messageEventListener","this","app","getServiceWorkerRegistration","requestPermission","permissionResult","usePublicVapidKey","useServiceWorker","ServiceWorkerRegistration","onMessage","nextOrObserver","next","setBackgroundMessageHandler","onTokenRefresh","register","update","catch","browserErrorMessage","event","firebaseMessaging","type","payload","PUSH_RECEIVED","logEvent","messageType","eventType","NOTIFICATION_CLICKED","Error","getEventType","analyticsProvider","message_id","message_name","message_time","message_device_time","Math","floor","bgMessageHandler","self","waitUntil","onPush","onSubChange","onNotificationClick","callback","registration","err","getMessagePayload","getClientList","clientList","some","client","visibilityState","url","startsWith","hasVisibleClients","sendMessageToWindowClients","notificationDetails","notification","notificationInformation","getNotificationData","showNotification","action","stopImmediatePropagation","link","fcmOptions","click_action","location","origin","getLink","getWindowClient","clients","openWindow","ms","Promise","resolve","setTimeout","focus","createNewMessage","postMessage","parsedURL","URL","href","host","matchAll","includeUncontrolled","details","title","actions","maxActions","NAMESPACE_EXPORTS","isSupported","prototype","hasOwnProperty","PushSubscription","window","cookieEnabled","INTERNAL","registerComponent","container","getProvider","getImmediate","options","keyName","appName","messagingSenderId","extractAppConfig","setServiceProps"],"mappings":"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","file":"static/js/10.d0c27e73.chunk.js","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum ErrorCode {\n  MISSING_APP_CONFIG_VALUES = 'missing-app-config-values',\n  AVAILABLE_IN_WINDOW = 'only-available-in-window',\n  AVAILABLE_IN_SW = 'only-available-in-sw',\n  PERMISSION_DEFAULT = 'permission-default',\n  PERMISSION_BLOCKED = 'permission-blocked',\n  UNSUPPORTED_BROWSER = 'unsupported-browser',\n  FAILED_DEFAULT_REGISTRATION = 'failed-service-worker-registration',\n  TOKEN_SUBSCRIBE_FAILED = 'token-subscribe-failed',\n  TOKEN_SUBSCRIBE_NO_TOKEN = 'token-subscribe-no-token',\n  TOKEN_UNSUBSCRIBE_FAILED = 'token-unsubscribe-failed',\n  TOKEN_UPDATE_FAILED = 'token-update-failed',\n  TOKEN_UPDATE_NO_TOKEN = 'token-update-no-token',\n  INVALID_BG_HANDLER = 'invalid-bg-handler',\n  USE_SW_AFTER_GET_TOKEN = 'use-sw-after-get-token',\n  INVALID_SW_REGISTRATION = 'invalid-sw-registration',\n  USE_VAPID_KEY_AFTER_GET_TOKEN = 'use-vapid-key-after-get-token',\n  INVALID_VAPID_KEY = 'invalid-vapid-key'\n}\n\nexport const ERROR_MAP: ErrorMap<ErrorCode> = {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]:\n    'Missing App configuration value: \"{$valueName}\"',\n  [ErrorCode.AVAILABLE_IN_WINDOW]:\n    'This method is available in a Window context.',\n  [ErrorCode.AVAILABLE_IN_SW]:\n    'This method is available in a service worker context.',\n  [ErrorCode.PERMISSION_DEFAULT]:\n    'The notification permission was not granted and dismissed instead.',\n  [ErrorCode.PERMISSION_BLOCKED]:\n    'The notification permission was not granted and blocked instead.',\n  [ErrorCode.UNSUPPORTED_BROWSER]:\n    \"This browser doesn't support the API's required to use the firebase SDK.\",\n  [ErrorCode.FAILED_DEFAULT_REGISTRATION]:\n    'We are unable to register the default service worker. {$browserErrorMessage}',\n  [ErrorCode.TOKEN_SUBSCRIBE_FAILED]:\n    'A problem occured while subscribing the user to FCM: {$errorInfo}',\n  [ErrorCode.TOKEN_SUBSCRIBE_NO_TOKEN]:\n    'FCM returned no token when subscribing the user to push.',\n  [ErrorCode.TOKEN_UNSUBSCRIBE_FAILED]:\n    'A problem occured while unsubscribing the ' +\n    'user from FCM: {$errorInfo}',\n  [ErrorCode.TOKEN_UPDATE_FAILED]:\n    'A problem occured while updating the user from FCM: {$errorInfo}',\n  [ErrorCode.TOKEN_UPDATE_NO_TOKEN]:\n    'FCM returned no token when updating the user to push.',\n  [ErrorCode.USE_SW_AFTER_GET_TOKEN]:\n    'The useServiceWorker() method may only be called once and must be ' +\n    'called before calling getToken() to ensure your service worker is used.',\n  [ErrorCode.INVALID_SW_REGISTRATION]:\n    'The input to useServiceWorker() must be a ServiceWorkerRegistration.',\n  [ErrorCode.INVALID_BG_HANDLER]:\n    'The input to setBackgroundMessageHandler() must be a function.',\n  [ErrorCode.INVALID_VAPID_KEY]: 'The public VAPID key must be a string.',\n  [ErrorCode.USE_VAPID_KEY_AFTER_GET_TOKEN]:\n    'The usePublicVapidKey() method may only be called once and must be ' +\n    'called before calling getToken() to ensure your VAPID key is used.'\n};\n\ninterface ErrorParams {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]: {\n    valueName: string;\n  };\n  [ErrorCode.FAILED_DEFAULT_REGISTRATION]: { browserErrorMessage: string };\n  [ErrorCode.TOKEN_SUBSCRIBE_FAILED]: { errorInfo: string };\n  [ErrorCode.TOKEN_UNSUBSCRIBE_FAILED]: { errorInfo: string };\n  [ErrorCode.TOKEN_UPDATE_FAILED]: { errorInfo: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  'messaging',\n  'Messaging',\n  ERROR_MAP\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app-types';\nimport { FirebaseError } from '@firebase/util';\nimport { AppConfig } from '../interfaces/app-config';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nexport function extractAppConfig(app: FirebaseApp): AppConfig {\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration Object');\n  }\n\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  }\n\n  // Required app config keys\n  const configKeys: ReadonlyArray<keyof FirebaseOptions> = [\n    'projectId',\n    'apiKey',\n    'appId',\n    'messagingSenderId'\n  ];\n\n  const { options } = app;\n  for (const keyName of configKeys) {\n    if (!options[keyName]) {\n      throw getMissingValueError(keyName);\n    }\n  }\n\n  return {\n    appName: app.name,\n    projectId: options.projectId!,\n    apiKey: options.apiKey!,\n    appId: options.appId!,\n    senderId: options.messagingSenderId!\n  };\n}\n\nfunction getMissingValueError(valueName: string): FirebaseError {\n  return ERROR_FACTORY.create(ErrorCode.MISSING_APP_CONFIG_VALUES, {\n    valueName\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function arrayToBase64(array: Uint8Array | ArrayBuffer): string {\n  const uint8Array = new Uint8Array(array);\n  const base64String = btoa(String.fromCharCode(...uint8Array));\n  return base64String\n    .replace(/=/g, '')\n    .replace(/\\+/g, '-')\n    .replace(/\\//g, '_');\n}\n\nexport function base64ToArray(base64String: string): Uint8Array {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding)\n    .replace(/\\-/g, '+')\n    .replace(/_/g, '/');\n\n  const rawData = atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { openDb, deleteDb } from 'idb';\nimport { TokenDetails } from '../interfaces/token-details';\nimport { arrayToBase64 } from './array-base64-translator';\n\n// https://github.com/firebase/firebase-js-sdk/blob/7857c212f944a2a9eb421fd4cb7370181bc034b5/packages/messaging/src/interfaces/token-details.ts\nexport interface V2TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: string | Uint8Array;\n  subscription: PushSubscription;\n  fcmSenderId: string;\n  fcmPushSet: string;\n  createTime?: number;\n  endpoint?: string;\n  auth?: string;\n  p256dh?: string;\n}\n\n// https://github.com/firebase/firebase-js-sdk/blob/6b5b15ce4ea3df5df5df8a8b33a4e41e249c7715/packages/messaging/src/interfaces/token-details.ts\nexport interface V3TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: Uint8Array;\n  fcmSenderId: string;\n  fcmPushSet: string;\n  endpoint: string;\n  auth: ArrayBuffer;\n  p256dh: ArrayBuffer;\n  createTime: number;\n}\n\n// https://github.com/firebase/firebase-js-sdk/blob/9567dba664732f681fa7fe60f5b7032bb1daf4c9/packages/messaging/src/interfaces/token-details.ts\nexport interface V4TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: Uint8Array;\n  fcmSenderId: string;\n  endpoint: string;\n  auth: ArrayBufferLike;\n  p256dh: ArrayBufferLike;\n  createTime: number;\n}\n\nconst OLD_DB_NAME = 'fcm_token_details_db';\n/**\n * The last DB version of 'fcm_token_details_db' was 4. This is one higher,\n * so that the upgrade callback is called for all versions of the old DB.\n */\nconst OLD_DB_VERSION = 5;\nconst OLD_OBJECT_STORE_NAME = 'fcm_token_object_Store';\n\nexport async function migrateOldDatabase(\n  senderId: string\n): Promise<TokenDetails | null> {\n  if ('databases' in indexedDB) {\n    // indexedDb.databases() is an IndexedDB v3 API\n    // and does not exist in all browsers.\n    // TODO: Remove typecast when it lands in TS types.\n    const databases = await (indexedDB as {\n      databases(): Promise<Array<{ name: string; version: number }>>;\n    }).databases();\n    const dbNames = databases.map(db => db.name);\n\n    if (!dbNames.includes(OLD_DB_NAME)) {\n      // old DB didn't exist, no need to open.\n      return null;\n    }\n  }\n\n  let tokenDetails: TokenDetails | null = null;\n\n  const db = await openDb(OLD_DB_NAME, OLD_DB_VERSION, async db => {\n    if (db.oldVersion < 2) {\n      // Database too old, skip migration.\n      return;\n    }\n\n    if (!db.objectStoreNames.contains(OLD_OBJECT_STORE_NAME)) {\n      // Database did not exist. Nothing to do.\n      return;\n    }\n\n    const objectStore = db.transaction.objectStore(OLD_OBJECT_STORE_NAME);\n    const value = await objectStore.index('fcmSenderId').get(senderId);\n    await objectStore.clear();\n\n    if (!value) {\n      // No entry in the database, nothing to migrate.\n      return;\n    }\n\n    if (db.oldVersion === 2) {\n      const oldDetails = value as V2TokenDetails;\n\n      if (!oldDetails.auth || !oldDetails.p256dh || !oldDetails.endpoint) {\n        return;\n      }\n\n      tokenDetails = {\n        token: oldDetails.fcmToken,\n        createTime: oldDetails.createTime ?? Date.now(),\n        subscriptionOptions: {\n          auth: oldDetails.auth,\n          p256dh: oldDetails.p256dh,\n          endpoint: oldDetails.endpoint,\n          swScope: oldDetails.swScope,\n          vapidKey:\n            typeof oldDetails.vapidKey === 'string'\n              ? oldDetails.vapidKey\n              : arrayToBase64(oldDetails.vapidKey)\n        }\n      };\n    } else if (db.oldVersion === 3) {\n      const oldDetails = value as V3TokenDetails;\n\n      tokenDetails = {\n        token: oldDetails.fcmToken,\n        createTime: oldDetails.createTime,\n        subscriptionOptions: {\n          auth: arrayToBase64(oldDetails.auth),\n          p256dh: arrayToBase64(oldDetails.p256dh),\n          endpoint: oldDetails.endpoint,\n          swScope: oldDetails.swScope,\n          vapidKey: arrayToBase64(oldDetails.vapidKey)\n        }\n      };\n    } else if (db.oldVersion === 4) {\n      const oldDetails = value as V4TokenDetails;\n\n      tokenDetails = {\n        token: oldDetails.fcmToken,\n        createTime: oldDetails.createTime,\n        subscriptionOptions: {\n          auth: arrayToBase64(oldDetails.auth),\n          p256dh: arrayToBase64(oldDetails.p256dh),\n          endpoint: oldDetails.endpoint,\n          swScope: oldDetails.swScope,\n          vapidKey: arrayToBase64(oldDetails.vapidKey)\n        }\n      };\n    }\n  });\n  db.close();\n\n  // Delete all old databases.\n  await deleteDb(OLD_DB_NAME);\n  await deleteDb('fcm_vapid_details_db');\n  await deleteDb('undefined');\n\n  return checkTokenDetails(tokenDetails) ? tokenDetails : null;\n}\n\nfunction checkTokenDetails(\n  tokenDetails: TokenDetails | null\n): tokenDetails is TokenDetails {\n  if (!tokenDetails || !tokenDetails.subscriptionOptions) {\n    return false;\n  }\n  const { subscriptionOptions } = tokenDetails;\n  return (\n    typeof tokenDetails.createTime === 'number' &&\n    tokenDetails.createTime > 0 &&\n    typeof tokenDetails.token === 'string' &&\n    tokenDetails.token.length > 0 &&\n    typeof subscriptionOptions.auth === 'string' &&\n    subscriptionOptions.auth.length > 0 &&\n    typeof subscriptionOptions.p256dh === 'string' &&\n    subscriptionOptions.p256dh.length > 0 &&\n    typeof subscriptionOptions.endpoint === 'string' &&\n    subscriptionOptions.endpoint.length > 0 &&\n    typeof subscriptionOptions.swScope === 'string' &&\n    subscriptionOptions.swScope.length > 0 &&\n    typeof subscriptionOptions.vapidKey === 'string' &&\n    subscriptionOptions.vapidKey.length > 0\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DB, openDb, deleteDb } from 'idb';\nimport { TokenDetails } from '../interfaces/token-details';\nimport { migrateOldDatabase } from './migrate-old-database';\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\n\n// Exported for tests.\nexport const DATABASE_NAME = 'firebase-messaging-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-messaging-store';\n\nlet dbPromise: Promise<DB> | null = null;\nfunction getDbPromise(): Promise<DB> {\n  if (!dbPromise) {\n    dbPromise = openDb(DATABASE_NAME, DATABASE_VERSION, upgradeDb => {\n      // We don't use 'break' in this switch statement, the fall-through\n      // behavior is what we want, because if there are multiple versions between\n      // the old version and the current version, we want ALL the migrations\n      // that correspond to those versions to run, not only the last one.\n      // eslint-disable-next-line default-case\n      switch (upgradeDb.oldVersion) {\n        case 0:\n          upgradeDb.createObjectStore(OBJECT_STORE_NAME);\n      }\n    });\n  }\n  return dbPromise;\n}\n\n/** Gets record(s) from the objectStore that match the given key. */\nexport async function dbGet(\n  firebaseDependencies: FirebaseInternalDependencies\n): Promise<TokenDetails | undefined> {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tokenDetails = await db\n    .transaction(OBJECT_STORE_NAME)\n    .objectStore(OBJECT_STORE_NAME)\n    .get(key);\n\n  if (tokenDetails) {\n    return tokenDetails;\n  } else {\n    // Check if there is a tokenDetails object in the old DB.\n    const oldTokenDetails = await migrateOldDatabase(\n      firebaseDependencies.appConfig.senderId\n    );\n    if (oldTokenDetails) {\n      await dbSet(firebaseDependencies, oldTokenDetails);\n      return oldTokenDetails;\n    }\n  }\n}\n\n/** Assigns or overwrites the record for the given key with the given value. */\nexport async function dbSet(\n  firebaseDependencies: FirebaseInternalDependencies,\n  tokenDetails: TokenDetails\n): Promise<TokenDetails> {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).put(tokenDetails, key);\n  await tx.complete;\n  return tokenDetails;\n}\n\n/** Removes record(s) from the objectStore that match the given key. */\nexport async function dbRemove(\n  firebaseDependencies: FirebaseInternalDependencies\n): Promise<void> {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).delete(key);\n  await tx.complete;\n}\n\n/** Deletes the DB. Useful for tests. */\nexport async function dbDelete(): Promise<void> {\n  if (dbPromise) {\n    (await dbPromise).close();\n    await deleteDb(DATABASE_NAME);\n    dbPromise = null;\n  }\n}\n\nfunction getKey({ appConfig }: FirebaseInternalDependencies): string {\n  return appConfig.appId;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_SW_PATH = '/firebase-messaging-sw.js';\nexport const DEFAULT_SW_SCOPE = '/firebase-cloud-messaging-push-scope';\n\nexport const DEFAULT_VAPID_KEY =\n  'BDOU99-h67HcA6JeFXHbSNMu7e2yNNu3RzoMj8TM4W88jITfq7ZmPvIM1Iv-4_l2LxQcYwhqby2xGpWwzjfAnG4';\n\nexport const ENDPOINT = 'https://fcmregistrations.googleapis.com/v1';\n\n/** Key of FCM Payload in Notification's data field. */\nexport const FCM_MSG = 'FCM_MSG';\n\nexport const CONSOLE_CAMPAIGN_ID = 'google.c.a.c_id';\nexport const CONSOLE_CAMPAIGN_NAME = 'google.c.a.c_l';\nexport const CONSOLE_CAMPAIGN_TIME = 'google.c.a.ts';\n/** Set to '1' if Analytics is enabled for the campaign */\nexport const CONSOLE_CAMPAIGN_ANALYTICS_ENABLED = 'google.c.a.e';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorCode, ERROR_FACTORY } from '../util/errors';\nimport { DEFAULT_VAPID_KEY, ENDPOINT } from '../util/constants';\nimport { TokenDetails, SubscriptionOptions } from '../interfaces/token-details';\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\nimport { AppConfig } from '../interfaces/app-config';\n\nexport interface ApiResponse {\n  token?: string;\n  error?: { message: string };\n}\n\nexport interface ApiRequestBody {\n  web: {\n    endpoint: string;\n    p256dh: string;\n    auth: string;\n    applicationPubKey?: string;\n  };\n}\n\nexport async function requestGetToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  subscriptionOptions: SubscriptionOptions\n): Promise<string> {\n  const headers = await getHeaders(firebaseDependencies);\n  const body = getBody(subscriptionOptions);\n\n  const subscribeOptions = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  let responseData: ApiResponse;\n  try {\n    const response = await fetch(\n      getEndpoint(firebaseDependencies.appConfig),\n      subscribeOptions\n    );\n    responseData = await response.json();\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_FAILED, {\n      errorInfo: err\n    });\n  }\n\n  if (responseData.error) {\n    const message = responseData.error.message;\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_FAILED, {\n      errorInfo: message\n    });\n  }\n\n  if (!responseData.token) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_NO_TOKEN);\n  }\n\n  return responseData.token;\n}\n\nexport async function requestUpdateToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  tokenDetails: TokenDetails\n): Promise<string> {\n  const headers = await getHeaders(firebaseDependencies);\n  const body = getBody(tokenDetails.subscriptionOptions!);\n\n  const updateOptions = {\n    method: 'PATCH',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  let responseData: ApiResponse;\n  try {\n    const response = await fetch(\n      `${getEndpoint(firebaseDependencies.appConfig)}/${tokenDetails.token}`,\n      updateOptions\n    );\n    responseData = await response.json();\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_FAILED, {\n      errorInfo: err\n    });\n  }\n\n  if (responseData.error) {\n    const message = responseData.error.message;\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_FAILED, {\n      errorInfo: message\n    });\n  }\n\n  if (!responseData.token) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_NO_TOKEN);\n  }\n\n  return responseData.token;\n}\n\nexport async function requestDeleteToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  token: string\n): Promise<void> {\n  const headers = await getHeaders(firebaseDependencies);\n\n  const unsubscribeOptions = {\n    method: 'DELETE',\n    headers\n  };\n\n  try {\n    const response = await fetch(\n      `${getEndpoint(firebaseDependencies.appConfig)}/${token}`,\n      unsubscribeOptions\n    );\n    const responseData: ApiResponse = await response.json();\n    if (responseData.error) {\n      const message = responseData.error.message;\n      throw ERROR_FACTORY.create(ErrorCode.TOKEN_UNSUBSCRIBE_FAILED, {\n        errorInfo: message\n      });\n    }\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UNSUBSCRIBE_FAILED, {\n      errorInfo: err\n    });\n  }\n}\n\nfunction getEndpoint({ projectId }: AppConfig): string {\n  return `${ENDPOINT}/projects/${projectId!}/registrations`;\n}\n\nasync function getHeaders({\n  appConfig,\n  installations\n}: FirebaseInternalDependencies): Promise<Headers> {\n  const authToken = await installations.getToken();\n\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': appConfig.apiKey!,\n    'x-goog-firebase-installations-auth': `FIS ${authToken}`\n  });\n}\n\nfunction getBody({\n  p256dh,\n  auth,\n  endpoint,\n  vapidKey\n}: SubscriptionOptions): ApiRequestBody {\n  const body: ApiRequestBody = {\n    web: {\n      endpoint,\n      auth,\n      p256dh\n    }\n  };\n\n  if (vapidKey !== DEFAULT_VAPID_KEY) {\n    body.web.applicationPubKey = vapidKey;\n  }\n\n  return body;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { dbGet, dbSet, dbRemove } from '../helpers/idb-manager';\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\nimport { TokenDetails, SubscriptionOptions } from '../interfaces/token-details';\nimport { requestUpdateToken, requestGetToken, requestDeleteToken } from './api';\nimport {\n  arrayToBase64,\n  base64ToArray\n} from '../helpers/array-base64-translator';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\n/** UpdateRegistration will be called once every week. */\nconst TOKEN_EXPIRATION_MS = 7 * 24 * 60 * 60 * 1000; // 7 days\n\nexport async function getToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  swRegistration: ServiceWorkerRegistration,\n  vapidKey: string\n): Promise<string> {\n  if (Notification.permission !== 'granted') {\n    throw ERROR_FACTORY.create(ErrorCode.PERMISSION_BLOCKED);\n  }\n\n  // If a PushSubscription exists it's returned, otherwise a new subscription\n  // is generated and returned.\n  const pushSubscription = await getPushSubscription(swRegistration, vapidKey);\n  const tokenDetails = await dbGet(firebaseDependencies);\n\n  const subscriptionOptions: SubscriptionOptions = {\n    vapidKey,\n    swScope: swRegistration.scope,\n    endpoint: pushSubscription.endpoint,\n    auth: arrayToBase64(pushSubscription.getKey('auth')!),\n    p256dh: arrayToBase64(pushSubscription.getKey('p256dh')!)\n  };\n\n  if (!tokenDetails) {\n    // No token, get a new one.\n    return getNewToken(firebaseDependencies, subscriptionOptions);\n  } else if (\n    !isTokenValid(tokenDetails.subscriptionOptions!, subscriptionOptions)\n  ) {\n    // Invalid token, get a new one.\n    try {\n      await requestDeleteToken(firebaseDependencies, tokenDetails.token);\n    } catch (e) {\n      // Suppress errors because of #2364\n      console.warn(e);\n    }\n\n    return getNewToken(firebaseDependencies, subscriptionOptions);\n  } else if (Date.now() >= tokenDetails.createTime + TOKEN_EXPIRATION_MS) {\n    // Weekly token refresh\n    return updateToken(\n      {\n        token: tokenDetails.token,\n        createTime: Date.now(),\n        subscriptionOptions\n      },\n      firebaseDependencies,\n      swRegistration\n    );\n  } else {\n    // Valid token, nothing to do.\n    return tokenDetails.token;\n  }\n}\n\n/**\n * This method deletes the token from the database, unsubscribes the token from\n * FCM, and unregisters the push subscription if it exists.\n */\nexport async function deleteToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  swRegistration: ServiceWorkerRegistration\n): Promise<boolean> {\n  const tokenDetails = await dbGet(firebaseDependencies);\n  if (tokenDetails) {\n    await requestDeleteToken(firebaseDependencies, tokenDetails.token);\n    await dbRemove(firebaseDependencies);\n  }\n\n  // Unsubscribe from the push subscription.\n  const pushSubscription = await swRegistration.pushManager.getSubscription();\n  if (pushSubscription) {\n    return pushSubscription.unsubscribe();\n  }\n\n  // If there's no SW, consider it a success.\n  return true;\n}\n\nasync function updateToken(\n  tokenDetails: TokenDetails,\n  firebaseDependencies: FirebaseInternalDependencies,\n  swRegistration: ServiceWorkerRegistration\n): Promise<string> {\n  try {\n    const updatedToken = await requestUpdateToken(\n      firebaseDependencies,\n      tokenDetails\n    );\n\n    const updatedTokenDetails: TokenDetails = {\n      token: updatedToken,\n      createTime: Date.now(),\n      ...tokenDetails\n    };\n\n    await dbSet(firebaseDependencies, updatedTokenDetails);\n    return updatedToken;\n  } catch (e) {\n    await deleteToken(firebaseDependencies, swRegistration);\n    throw e;\n  }\n}\n\nasync function getNewToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  subscriptionOptions: SubscriptionOptions\n): Promise<string> {\n  const token = await requestGetToken(\n    firebaseDependencies,\n    subscriptionOptions\n  );\n  const tokenDetails: TokenDetails = {\n    token,\n    createTime: Date.now(),\n    subscriptionOptions\n  };\n  await dbSet(firebaseDependencies, tokenDetails);\n  return tokenDetails.token;\n}\n\n/**\n * Gets a PushSubscription for the current user.\n */\nasync function getPushSubscription(\n  swRegistration: ServiceWorkerRegistration,\n  vapidKey: string\n): Promise<PushSubscription> {\n  const subscription = await swRegistration.pushManager.getSubscription();\n  if (subscription) {\n    return subscription;\n  }\n  return swRegistration.pushManager.subscribe({\n    userVisibleOnly: true,\n    // Chrome <= 75 doesn't support base64-encoded VAPID key. For backward compatibility, VAPID key\n    // submitted to pushManager#subscribe must be of type Uint8Array.\n    applicationServerKey: base64ToArray(vapidKey)\n  });\n}\n\n/**\n * Checks if the saved tokenDetails object matches the configuration provided.\n */\nfunction isTokenValid(\n  dbOptions: SubscriptionOptions,\n  currentOptions: SubscriptionOptions\n): boolean {\n  const isVapidKeyEqual = currentOptions.vapidKey === dbOptions.vapidKey;\n  const isEndpointEqual = currentOptions.endpoint === dbOptions.endpoint;\n  const isAuthEqual = currentOptions.auth === dbOptions.auth;\n  const isP256dhEqual = currentOptions.p256dh === dbOptions.p256dh;\n\n  return isVapidKeyEqual && isEndpointEqual && isAuthEqual && isP256dhEqual;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MessagePayload } from './message-payload';\n\nexport enum MessageType {\n  PUSH_RECEIVED = 'push-received',\n  NOTIFICATION_CLICKED = 'notification-clicked'\n}\n\nexport interface InternalMessage {\n  firebaseMessaging: {\n    type: MessageType;\n    payload: MessagePayload;\n  };\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ConsoleMessageData } from '../interfaces/message-payload';\nimport { CONSOLE_CAMPAIGN_ID } from '../util/constants';\n\nexport function isConsoleMessage(data: unknown): data is ConsoleMessageData {\n  // This message has a campaign ID, meaning it was sent using the\n  // Firebase Console.\n  return typeof data === 'object' && !!data && CONSOLE_CAMPAIGN_ID in data;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getToken, deleteToken } from '../core/token-management';\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\nimport { FirebaseMessaging } from '@firebase/messaging-types';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { NextFn, Observer, Unsubscribe } from '@firebase/util';\nimport { InternalMessage, MessageType } from '../interfaces/internal-message';\nimport {\n  CONSOLE_CAMPAIGN_ID,\n  CONSOLE_CAMPAIGN_ANALYTICS_ENABLED,\n  CONSOLE_CAMPAIGN_NAME,\n  CONSOLE_CAMPAIGN_TIME,\n  DEFAULT_SW_PATH,\n  DEFAULT_SW_SCOPE,\n  DEFAULT_VAPID_KEY\n} from '../util/constants';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { ConsoleMessageData } from '../interfaces/message-payload';\nimport { isConsoleMessage } from '../helpers/is-console-message';\nimport { FirebaseService } from '@firebase/app-types/private';\n\nexport class WindowController implements FirebaseMessaging, FirebaseService {\n  private vapidKey: string | null = null;\n  private swRegistration?: ServiceWorkerRegistration;\n  private onMessageCallback: NextFn<object> | null = null;\n\n  constructor(\n    private readonly firebaseDependencies: FirebaseInternalDependencies\n  ) {\n    navigator.serviceWorker.addEventListener('message', e =>\n      this.messageEventListener(e)\n    );\n  }\n\n  get app(): FirebaseApp {\n    return this.firebaseDependencies.app;\n  }\n\n  async getToken(): Promise<string> {\n    if (!this.vapidKey) {\n      this.vapidKey = DEFAULT_VAPID_KEY;\n    }\n\n    const swRegistration = await this.getServiceWorkerRegistration();\n\n    // Check notification permission.\n    if (Notification.permission === 'default') {\n      // The user hasn't allowed or denied notifications yet. Ask them.\n      await Notification.requestPermission();\n    }\n\n    if (Notification.permission !== 'granted') {\n      throw ERROR_FACTORY.create(ErrorCode.PERMISSION_BLOCKED);\n    }\n\n    return getToken(this.firebaseDependencies, swRegistration, this.vapidKey);\n  }\n\n  async deleteToken(): Promise<boolean> {\n    const swRegistration = await this.getServiceWorkerRegistration();\n\n    return deleteToken(this.firebaseDependencies, swRegistration);\n  }\n\n  /**\n   * Request permission if it is not currently granted.\n   *\n   * @return Resolves if the permission was granted, rejects otherwise.\n   *\n   * @deprecated Use Notification.requestPermission() instead.\n   * https://developer.mozilla.org/en-US/docs/Web/API/Notification/requestPermission\n   */\n  async requestPermission(): Promise<void> {\n    if (Notification.permission === 'granted') {\n      return;\n    }\n\n    const permissionResult = await Notification.requestPermission();\n    if (permissionResult === 'granted') {\n      return;\n    } else if (permissionResult === 'denied') {\n      throw ERROR_FACTORY.create(ErrorCode.PERMISSION_BLOCKED);\n    } else {\n      throw ERROR_FACTORY.create(ErrorCode.PERMISSION_DEFAULT);\n    }\n  }\n\n  // TODO: Deprecate this and make VAPID key a parameter in getToken.\n  usePublicVapidKey(vapidKey: string): void {\n    if (this.vapidKey !== null) {\n      throw ERROR_FACTORY.create(ErrorCode.USE_VAPID_KEY_AFTER_GET_TOKEN);\n    }\n\n    if (typeof vapidKey !== 'string' || vapidKey.length === 0) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_VAPID_KEY);\n    }\n\n    this.vapidKey = vapidKey;\n  }\n\n  useServiceWorker(swRegistration: ServiceWorkerRegistration): void {\n    if (!(swRegistration instanceof ServiceWorkerRegistration)) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_SW_REGISTRATION);\n    }\n\n    if (this.swRegistration) {\n      throw ERROR_FACTORY.create(ErrorCode.USE_SW_AFTER_GET_TOKEN);\n    }\n\n    this.swRegistration = swRegistration;\n  }\n\n  /**\n   * @param nextOrObserver An observer object or a function triggered on\n   * message.\n   * @return The unsubscribe function for the observer.\n   */\n  // TODO: Simplify this to only accept a function and not an Observer.\n  onMessage(nextOrObserver: NextFn<object> | Observer<object>): Unsubscribe {\n    this.onMessageCallback =\n      typeof nextOrObserver === 'function'\n        ? nextOrObserver\n        : nextOrObserver.next;\n\n    return () => {\n      this.onMessageCallback = null;\n    };\n  }\n\n  setBackgroundMessageHandler(): void {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_SW);\n  }\n\n  // Unimplemented\n  onTokenRefresh(): Unsubscribe {\n    return () => {};\n  }\n\n  /**\n   * Creates or updates the default service worker registration.\n   * @return The service worker registration to be used for the push service.\n   */\n  private async getServiceWorkerRegistration(): Promise<\n    ServiceWorkerRegistration\n  > {\n    if (!this.swRegistration) {\n      try {\n        this.swRegistration = await navigator.serviceWorker.register(\n          DEFAULT_SW_PATH,\n          {\n            scope: DEFAULT_SW_SCOPE\n          }\n        );\n\n        // The timing when browser updates sw when sw has an update is unreliable by my experiment.\n        // It leads to version conflict when the SDK upgrades to a newer version in the main page, but\n        // sw is stuck with the old version. For example, https://github.com/firebase/firebase-js-sdk/issues/2590\n        // The following line reliably updates sw if there was an update.\n        this.swRegistration.update().catch(() => {\n          /* it is non blocking and we don't care if it failed */\n        });\n      } catch (e) {\n        throw ERROR_FACTORY.create(ErrorCode.FAILED_DEFAULT_REGISTRATION, {\n          browserErrorMessage: e.message\n        });\n      }\n    }\n\n    return this.swRegistration;\n  }\n\n  private async messageEventListener(event: MessageEvent): Promise<void> {\n    if (!event.data?.firebaseMessaging) {\n      // Not a message from FCM\n      return;\n    }\n\n    const { type, payload } = (event.data as InternalMessage).firebaseMessaging;\n\n    if (this.onMessageCallback && type === MessageType.PUSH_RECEIVED) {\n      this.onMessageCallback(payload);\n    }\n\n    const { data } = payload;\n    if (\n      isConsoleMessage(data) &&\n      data[CONSOLE_CAMPAIGN_ANALYTICS_ENABLED] === '1'\n    ) {\n      // Analytics is enabled on this message, so we should log it.\n      await this.logEvent(type, data);\n    }\n  }\n\n  private async logEvent(\n    messageType: MessageType,\n    data: ConsoleMessageData\n  ): Promise<void> {\n    const eventType = getEventType(messageType);\n    const analytics = await this.firebaseDependencies.analyticsProvider.get();\n    analytics.logEvent(eventType, {\n      /* eslint-disable camelcase */\n      message_id: data[CONSOLE_CAMPAIGN_ID],\n      message_name: data[CONSOLE_CAMPAIGN_NAME],\n      message_time: data[CONSOLE_CAMPAIGN_TIME],\n      message_device_time: Math.floor(Date.now() / 1000)\n      /* eslint-enable camelcase */\n    });\n  }\n}\n\nfunction getEventType(messageType: MessageType): string {\n  switch (messageType) {\n    case MessageType.NOTIFICATION_CLICKED:\n      return 'notification_open';\n    case MessageType.PUSH_RECEIVED:\n      return 'notification_foreground';\n    default:\n      throw new Error();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deleteToken, getToken } from '../core/token-management';\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\nimport { FirebaseMessaging } from '@firebase/messaging-types';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport {\n  MessagePayload,\n  NotificationDetails\n} from '../interfaces/message-payload';\nimport { FCM_MSG, DEFAULT_VAPID_KEY } from '../util/constants';\nimport { MessageType, InternalMessage } from '../interfaces/internal-message';\nimport { dbGet } from '../helpers/idb-manager';\nimport { Unsubscribe } from '@firebase/util';\nimport { sleep } from '../helpers/sleep';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { isConsoleMessage } from '../helpers/is-console-message';\nimport { FirebaseService } from '@firebase/app-types/private';\n\n// Let TS know that this is a service worker\ndeclare const self: ServiceWorkerGlobalScope;\n\nexport type BgMessageHandler = (payload: MessagePayload) => unknown;\n\nexport class SwController implements FirebaseMessaging, FirebaseService {\n  private vapidKey: string | null = null;\n  private bgMessageHandler: BgMessageHandler | null = null;\n\n  constructor(\n    private readonly firebaseDependencies: FirebaseInternalDependencies\n  ) {\n    self.addEventListener('push', e => {\n      e.waitUntil(this.onPush(e));\n    });\n    self.addEventListener('pushsubscriptionchange', e => {\n      e.waitUntil(this.onSubChange(e));\n    });\n    self.addEventListener('notificationclick', e => {\n      e.waitUntil(this.onNotificationClick(e));\n    });\n  }\n\n  get app(): FirebaseApp {\n    return this.firebaseDependencies.app;\n  }\n\n  /**\n   * Calling setBackgroundMessageHandler will opt in to some specific\n   * behaviours.\n   * 1.) If a notification doesn't need to be shown due to a window already\n   * being visible, then push messages will be sent to the page.\n   * 2.) If a notification needs to be shown, and the message contains no\n   * notification data this method will be called\n   * and the promise it returns will be passed to event.waitUntil.\n   * If you do not set this callback then all push messages will let and the\n   * developer can handle them in a their own 'push' event callback\n   *\n   * @param callback The callback to be called when a push message is received\n   * and a notification must be shown. The callback will be given the data from\n   * the push message.\n   */\n  setBackgroundMessageHandler(callback: BgMessageHandler): void {\n    if (!callback || typeof callback !== 'function') {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_BG_HANDLER);\n    }\n\n    this.bgMessageHandler = callback;\n  }\n\n  // TODO: Remove getToken from SW Controller.\n  // Calling this from an old SW can cause all kinds of trouble.\n  async getToken(): Promise<string> {\n    if (!this.vapidKey) {\n      // Call getToken using the current VAPID key if there already is a token.\n      // This is needed because usePublicVapidKey was not available in SW.\n      // It will be removed when vapidKey becomes a parameter of getToken, or\n      // when getToken is removed from SW.\n      const tokenDetails = await dbGet(this.firebaseDependencies);\n      this.vapidKey =\n        tokenDetails?.subscriptionOptions?.vapidKey ?? DEFAULT_VAPID_KEY;\n    }\n\n    return getToken(\n      this.firebaseDependencies,\n      self.registration,\n      this.vapidKey\n    );\n  }\n\n  // TODO: Remove deleteToken from SW Controller.\n  // Calling this from an old SW can cause all kinds of trouble.\n  deleteToken(): Promise<boolean> {\n    return deleteToken(this.firebaseDependencies, self.registration);\n  }\n\n  requestPermission(): Promise<void> {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  // TODO: Deprecate this and make VAPID key a parameter in getToken.\n  // TODO: Remove this together with getToken from SW Controller.\n  usePublicVapidKey(vapidKey: string): void {\n    if (this.vapidKey !== null) {\n      throw ERROR_FACTORY.create(ErrorCode.USE_VAPID_KEY_AFTER_GET_TOKEN);\n    }\n\n    if (typeof vapidKey !== 'string' || vapidKey.length === 0) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_VAPID_KEY);\n    }\n\n    this.vapidKey = vapidKey;\n  }\n\n  useServiceWorker(): void {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  onMessage(): Unsubscribe {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  onTokenRefresh(): Unsubscribe {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  /**\n   * A handler for push events that shows notifications based on the content of\n   * the payload.\n   *\n   * The payload must be a JSON-encoded Object with a `notification` key. The\n   * value of the `notification` property will be used as the NotificationOptions\n   * object passed to showNotification. Additionally, the `title` property of the\n   * notification object will be used as the title.\n   *\n   * If there is no notification data in the payload then no notification will be\n   * shown.\n   */\n  async onPush(event: PushEvent): Promise<void> {\n    const payload = getMessagePayload(event);\n    if (!payload) {\n      return;\n    }\n\n    const clientList = await getClientList();\n    if (hasVisibleClients(clientList)) {\n      // App in foreground. Send to page.\n      return sendMessageToWindowClients(clientList, payload);\n    }\n\n    const notificationDetails = getNotificationData(payload);\n    if (notificationDetails) {\n      await showNotification(notificationDetails);\n    } else if (this.bgMessageHandler) {\n      await this.bgMessageHandler(payload);\n    }\n  }\n\n  async onSubChange(event: PushSubscriptionChangeEvent): Promise<void> {\n    const { newSubscription } = event;\n    if (!newSubscription) {\n      // Subscription revoked, delete token\n      await deleteToken(this.firebaseDependencies, self.registration);\n      return;\n    }\n\n    const tokenDetails = await dbGet(this.firebaseDependencies);\n    await deleteToken(this.firebaseDependencies, self.registration);\n    await getToken(\n      this.firebaseDependencies,\n      self.registration,\n      tokenDetails?.subscriptionOptions?.vapidKey ?? DEFAULT_VAPID_KEY\n    );\n  }\n\n  async onNotificationClick(event: NotificationEvent): Promise<void> {\n    const payload: MessagePayload = event.notification?.data?.[FCM_MSG];\n    if (!payload) {\n      // Not an FCM notification, do nothing.\n      return;\n    } else if (event.action) {\n      // User clicked on an action button.\n      // This will allow devs to act on action button clicks by using a custom\n      // onNotificationClick listener that they define.\n      return;\n    }\n\n    // Prevent other listeners from receiving the event\n    event.stopImmediatePropagation();\n    event.notification.close();\n\n    const link = getLink(payload);\n    if (!link) {\n      return;\n    }\n\n    let client = await getWindowClient(link);\n    if (!client) {\n      // Unable to find window client so need to open one.\n      // This also focuses the opened client.\n      client = await self.clients.openWindow(link);\n      // Wait three seconds for the client to initialize and set up the message\n      // handler so that it can receive the message.\n      await sleep(3000);\n    } else {\n      client = await client.focus();\n    }\n\n    if (!client) {\n      // Window Client will not be returned if it's for a third party origin.\n      return;\n    }\n\n    const message = createNewMessage(MessageType.NOTIFICATION_CLICKED, payload);\n    return client.postMessage(message);\n  }\n}\n\nfunction getMessagePayload({ data }: PushEvent): MessagePayload | null {\n  if (!data) {\n    return null;\n  }\n\n  try {\n    return data.json();\n  } catch (err) {\n    // Not JSON so not an FCM message.\n    return null;\n  }\n}\n\nfunction getNotificationData(\n  payload: MessagePayload\n): NotificationDetails | undefined {\n  if (!payload || typeof payload.notification !== 'object') {\n    return;\n  }\n\n  const notificationInformation: NotificationDetails = {\n    ...payload.notification\n  };\n\n  // Put the message payload under FCM_MSG name so we can identify the\n  // notification as being an FCM notification vs a notification from\n  // somewhere else (i.e. normal web push or developer generated\n  // notification).\n  notificationInformation.data = {\n    ...payload.notification.data,\n    [FCM_MSG]: payload\n  };\n\n  return notificationInformation;\n}\n\n/**\n * @param url The URL to look for when focusing a client.\n * @return Returns an existing window client or a newly opened WindowClient.\n */\nasync function getWindowClient(url: string): Promise<WindowClient | null> {\n  // Use URL to normalize the URL when comparing to windowClients.\n  // This at least handles whether to include trailing slashes or not\n  const parsedURL = new URL(url, self.location.href);\n\n  const clientList = await getClientList();\n\n  for (const client of clientList) {\n    const parsedClientUrl = new URL(client.url, self.location.href);\n    if (parsedClientUrl.host === parsedURL.host) {\n      return client;\n    }\n  }\n\n  return null;\n}\n\n/**\n * @returns If there is currently a visible WindowClient, this method will\n * resolve to true, otherwise false.\n */\nfunction hasVisibleClients(clientList: WindowClient[]): boolean {\n  return clientList.some(\n    client =>\n      client.visibilityState === 'visible' &&\n      // Ignore chrome-extension clients as that matches the background pages\n      // of extensions, which are always considered visible for some reason.\n      !client.url.startsWith('chrome-extension://')\n  );\n}\n\n/**\n * @param payload The data from the push event that should be sent to all\n * available pages.\n * @returns Returns a promise that resolves once the message has been sent to\n * all WindowClients.\n */\nfunction sendMessageToWindowClients(\n  clientList: WindowClient[],\n  payload: MessagePayload\n): void {\n  const message = createNewMessage(MessageType.PUSH_RECEIVED, payload);\n\n  for (const client of clientList) {\n    client.postMessage(message);\n  }\n}\n\nfunction getClientList(): Promise<WindowClient[]> {\n  return self.clients.matchAll({\n    type: 'window',\n    includeUncontrolled: true\n    // TS doesn't know that \"type: 'window'\" means it'll return WindowClient[]\n  }) as Promise<WindowClient[]>;\n}\n\nfunction createNewMessage(\n  type: MessageType,\n  payload: MessagePayload\n): InternalMessage {\n  return {\n    firebaseMessaging: { type, payload }\n  };\n}\n\nfunction showNotification(details: NotificationDetails): Promise<void> {\n  const title = details.title ?? '';\n\n  const { actions } = details;\n  // Note: Firefox does not support the maxActions property.\n  // https://developer.mozilla.org/en-US/docs/Web/API/notification/maxActions\n  const { maxActions } = Notification;\n  if (actions && maxActions && actions.length > maxActions) {\n    console.warn(\n      `This browser only supports ${maxActions} actions. The remaining actions will not be displayed.`\n    );\n  }\n\n  return self.registration.showNotification(title, details);\n}\n\nfunction getLink(payload: MessagePayload): string | null {\n  // eslint-disable-next-line camelcase\n  const link = payload.fcmOptions?.link ?? payload.notification?.click_action;\n  if (link) {\n    return link;\n  }\n\n  if (isConsoleMessage(payload.data)) {\n    // Notification created in the Firebase Console. Redirect to origin.\n    return self.location.origin;\n  } else {\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Returns a promise that resolves after given time passes. */\nexport function sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport '@firebase/installations';\nimport {\n  _FirebaseNamespace,\n  FirebaseService\n} from '@firebase/app-types/private';\nimport { FirebaseMessaging } from '@firebase/messaging-types';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer\n} from '@firebase/component';\nimport { extractAppConfig } from './helpers/extract-app-config';\nimport { FirebaseInternalDependencies } from './interfaces/internal-dependencies';\nimport { ERROR_FACTORY, ErrorCode } from './util/errors';\nimport { WindowController } from './controllers/window-controller';\nimport { SwController } from './controllers/sw-controller';\n\nconst MESSAGING_NAME = 'messaging';\nfunction factoryMethod(\n  container: ComponentContainer\n): FirebaseService & FirebaseMessaging {\n  // Dependencies.\n  const app = container.getProvider('app').getImmediate();\n  const appConfig = extractAppConfig(app);\n  const installations = container.getProvider('installations').getImmediate();\n  const analyticsProvider = container.getProvider('analytics-internal');\n\n  const firebaseDependencies: FirebaseInternalDependencies = {\n    app,\n    appConfig,\n    installations,\n    analyticsProvider\n  };\n\n  if (!isSupported()) {\n    throw ERROR_FACTORY.create(ErrorCode.UNSUPPORTED_BROWSER);\n  }\n\n  if (self && 'ServiceWorkerGlobalScope' in self) {\n    // Running in ServiceWorker context\n    return new SwController(firebaseDependencies);\n  } else {\n    // Assume we are in the window context.\n    return new WindowController(firebaseDependencies);\n  }\n}\n\nconst NAMESPACE_EXPORTS = {\n  isSupported\n};\n\n(firebase as _FirebaseNamespace).INTERNAL.registerComponent(\n  new Component(\n    MESSAGING_NAME,\n    factoryMethod,\n    ComponentType.PUBLIC\n  ).setServiceProps(NAMESPACE_EXPORTS)\n);\n\n/**\n * Define extension behavior of `registerMessaging`\n */\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    messaging: {\n      (app?: FirebaseApp): FirebaseMessaging;\n      isSupported(): boolean;\n    };\n  }\n  interface FirebaseApp {\n    messaging(): FirebaseMessaging;\n  }\n}\n\nfunction isSupported(): boolean {\n  if (self && 'ServiceWorkerGlobalScope' in self) {\n    // Running in ServiceWorker context\n    return isSWControllerSupported();\n  } else {\n    // Assume we are in the window context.\n    return isWindowControllerSupported();\n  }\n}\n\n/**\n * Checks to see if the required APIs exist.\n */\nfunction isWindowControllerSupported(): boolean {\n  return (\n    'indexedDB' in window &&\n    indexedDB !== null &&\n    navigator.cookieEnabled &&\n    'serviceWorker' in navigator &&\n    'PushManager' in window &&\n    'Notification' in window &&\n    'fetch' in window &&\n    ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&\n    PushSubscription.prototype.hasOwnProperty('getKey')\n  );\n}\n\n/**\n * Checks to see if the required APIs exist within SW Context.\n */\nfunction isSWControllerSupported(): boolean {\n  return (\n    'indexedDB' in self &&\n    indexedDB !== null &&\n    'PushManager' in self &&\n    'Notification' in self &&\n    ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&\n    PushSubscription.prototype.hasOwnProperty('getKey')\n  );\n}\n"],"sourceRoot":""}