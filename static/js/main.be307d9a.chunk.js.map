{"version":3,"sources":["Imagenes/wall2.jpg","Components/Login/LoginStyles.js","Components/Login/Login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LoginStyles","makeStyles","theme","container","backgroundImage","Wall","height","containerTop","justifyContent","alignItems","fontFamily","fontSize","color","fontWeight","textShadow","containerMid","containerBottom","logincard","display","flexDirection","form","paddingLeft","paddingRight","username","backgroundColor","margin","borderRadius","boxShadow","password","button","accounticon","alignSelf","Login","notched","MuiOutlinedInput","notchedOutline","borderStyle","classes","StylesProvider","injectFirst","Grid","className","item","xs","TextField","id","label","variant","Divider","class","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,mC,kMC8E5BC,EA3EKC,aAAW,SAACC,GAAD,MAAY,CACzCC,UAAW,CACTC,gBAAgB,OAAD,OAASC,IAAT,KACfC,OAAQ,SAGVC,aAAc,CACZC,eAAgB,SAChBC,WAAY,WACZC,WAAY,wBACZC,SAAU,MACVC,MAAO,QACPC,WAAY,MACZC,WAAY,mBAEdC,aAAc,CACZP,eAAgB,UAElBQ,gBAAiB,GAEjBC,UAAW,CACTC,QAAS,OAETC,cAAe,SACfX,eAAgB,UAGlBY,KAAM,CACJF,QAAS,OACTC,cAAe,SACfE,YAAa,OACbC,aAAc,QAGhBC,SAAU,CACRL,QAAS,OACTV,eAAgB,SAChBF,OAAQ,OACRkB,gBAAiB,UACjBC,OAAQ,YACRC,aAAc,OAEdC,UAAW,yBAGbC,SAAU,CACRV,QAAS,OACTV,eAAgB,SAChBF,OAAQ,OACRkB,gBAAiB,UACjBC,OAAQ,YACRC,aAAc,OACdC,UAAW,yBAGbE,OAAQ,CACNX,QAAS,OACTV,eAAgB,SAChBF,OAAQ,OACRkB,gBAAiB,UACjBC,OAAQ,YACRC,aAAc,OACdd,MAAO,QACPF,WAAY,wBACZD,WAAY,SACZI,WAAY,OAGdiB,YAAa,CACXnB,SAAU,MACVoB,UAAW,SACXnB,MAAO,a,0ECVIoB,GAnDG/B,YAAW,CAC3BgC,QAAS,CACPC,iBAAkB,CAChBC,eAAgB,CACdC,YAAa,cAMP,WACZ,IAAMC,EAAUrC,IAEhB,OACE,kBAACsC,EAAA,EAAD,CAAgBC,aAAW,GACzB,kBAACC,EAAA,EAAD,CAAMrC,WAAS,EAACsC,UAAWJ,EAAQlC,WACjC,kBAACqC,EAAA,EAAD,CAAME,MAAI,EAACvC,WAAS,EAACwC,GAAI,GAAIF,UAAWJ,EAAQ9B,cAAhD,gBAGA,kBAACiC,EAAA,EAAD,CAAME,MAAI,EAACvC,WAAS,EAACwC,GAAI,GAAIF,UAAWJ,EAAQtB,cAC9C,kBAACyB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGF,UAAWJ,EAAQpB,WACnC,yBAAKwB,UAAWJ,EAAQd,UACtB,kBAAC,IAAD,CAAekB,UAAWJ,EAAQP,cAClC,kBAACc,EAAA,EAAD,CACEC,GAAG,iBACHC,MAAM,WACNC,QAAQ,cAGZ,yBAAKN,UAAWJ,EAAQT,UACtB,kBAAC,IAAD,CAAUa,UAAWJ,EAAQP,cAC7B,kBAACc,EAAA,EAAD,CACEC,GAAG,iBACHC,MAAM,WACNC,QAAQ,cAGZ,kBAACC,EAAA,EAAD,CAASD,QAAQ,WACjB,yBAAKE,MAAM,QACT,gCACE,yCACQ,OAIhB,kBAACT,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIF,UAAWJ,EAAQrB,sBC/C/BkC,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCMcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.be307d9a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wall2.3709e800.jpg\";","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport Wall from \"../../Imagenes/wall2.jpg\";\r\n\r\nconst LoginStyles = makeStyles((theme) => ({\r\n  container: {\r\n    backgroundImage: `url(${Wall})`,\r\n    height: \"937px\",\r\n  },\r\n\r\n  containerTop: {\r\n    justifyContent: \"center\",\r\n    alignItems: \"flex-end\",\r\n    fontFamily: \"'Poppins', sans-serif\",\r\n    fontSize: \"3em\",\r\n    color: \"white\",\r\n    fontWeight: \"600\",\r\n    textShadow: \"5px 2px #1B1B1B\",\r\n  },\r\n  containerMid: {\r\n    justifyContent: \"center\",\r\n  },\r\n  containerBottom: {},\r\n\r\n  logincard: {\r\n    display: \"flex\",\r\n\r\n    flexDirection: \"column\",\r\n    justifyContent: \"center\",\r\n  },\r\n\r\n  form: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    paddingLeft: \"30px\",\r\n    paddingRight: \"30px\",\r\n  },\r\n\r\n  username: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    height: \"50px\",\r\n    backgroundColor: \"#A7A7A7\",\r\n    margin: \"20px 30px\",\r\n    borderRadius: \"30px\",\r\n    // color: \"white\",\r\n    boxShadow: \"inset 0 0 5px #000000\",\r\n  },\r\n\r\n  password: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    height: \"50px\",\r\n    backgroundColor: \"#A7A7A7\",\r\n    margin: \"20px 30px\",\r\n    borderRadius: \"30px\",\r\n    boxShadow: \"inset 0 0 5px #000000\",\r\n  },\r\n\r\n  button: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    height: \"50px\",\r\n    backgroundColor: \"#444444\",\r\n    margin: \"20px 30px\",\r\n    borderRadius: \"30px\",\r\n    color: \"white\",\r\n    fontFamily: \"'Poppins', sans-serif\",\r\n    alignItems: \"center\",\r\n    fontWeight: \"500\",\r\n  },\r\n\r\n  accounticon: {\r\n    fontSize: \"2em\",\r\n    alignSelf: \"center\",\r\n    color: \"white\",\r\n  },\r\n}));\r\n\r\nexport default LoginStyles;\r\n","import React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport LoginStyles from \"./LoginStyles\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { StylesProvider } from \"@material-ui/styles\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport \"./Login.css\";\r\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\r\nimport LockIcon from \"@material-ui/icons/Lock\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst useStyles = makeStyles({\r\n  notched: {\r\n    MuiOutlinedInput: {\r\n      notchedOutline: {\r\n        borderStyle: \"hidden\",\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\nconst Login = () => {\r\n  const classes = LoginStyles();\r\n\r\n  return (\r\n    <StylesProvider injectFirst>\r\n      <Grid container className={classes.container}>\r\n        <Grid item container xs={12} className={classes.containerTop}>\r\n          Service Desk\r\n        </Grid>\r\n        <Grid item container xs={12} className={classes.containerMid}>\r\n          <Grid item xs={2} className={classes.logincard}>\r\n            <div className={classes.username}>\r\n              <AccountCircle className={classes.accounticon} />\r\n              <TextField\r\n                id=\"outlined-basic\"\r\n                label=\"Username\"\r\n                variant=\"outlined\"\r\n              />\r\n            </div>\r\n            <div className={classes.password}>\r\n              <LockIcon className={classes.accounticon} />\r\n              <TextField\r\n                id=\"outlined-basic\"\r\n                label=\"Password\"\r\n                variant=\"outlined\"\r\n              />\r\n            </div>\r\n            <Divider variant=\"middle\" />\r\n            <div class=\"grid\">\r\n              <button>\r\n                <span>Log In</span>\r\n              </button>{\" \"}\r\n            </div>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item xs={12} className={classes.containerBottom}></Grid>\r\n      </Grid>\r\n    </StylesProvider>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import React from \"react\";\nimport Login from \"./Components/Login/Login.js\";\n\nfunction App() {\n  return (\n    <div>\n      <Login />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}